#!/bin/bash

# Function to find the most recently modified .c file
find_latest_c_file() {
  # Current directory only
  # find . -maxdepth 1 -name "*.c" -printf '%T@ %p\n' \
  #   | sort -k1,1nr \
  #   | awk '{print substr($0, index($0,$2))}' \
  #   | head -n 1

  # Every directory
  find ~/_ -name "*.c" -printf '%T@ %p\n' \
    | sort -k1,1nr \
    | awk '{print substr($0, index($0,$2))}' \
    | head -n 1
}

generate_unique_filename() {
  local base="$1"
  if [ -n "$base" ]; then
    base="${base}-"
  fi

  local extension="$2"
  if [ -n "$extension" ]; then
    extension=".${extension}"
  fi

  while true; do
    # Generate a random file name 
    # (10-character long random alphanumeric string)
    local random_name=$(
      cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 10 | head -n 1 \
    )

    # Formulate the full name
    local random_filename="${base}${random_name}${extension}"
    
    # Check if the file name exists in the current directory
    if [[ ! -e "${random_filename}" ]]; then
      echo "${random_filename}"
      break
    fi
  done
}

# _____________________________________________________________________________
# Main script logic

# Check if dcc is installed
if ! command -v dcc &> /dev/null; then
  echo "dcc could not be found, please install it first."
  echo "(https://github.com/COMP1511UNSW/dcc)"
  exit 1
fi

# Initialize variables
filename=""
dcc_args=()
executable_args=()

# Check if the first argument is a .c file, only if arguments are present
if [[ $# -gt 0 && $1 == *.c ]]; then
    filename=$1
    shift  # Shift arguments to the left
else
    filename=$(find_latest_c_file)
fi

# Boolean variable to determine if we have encountered the separator
found_separator=false

# Loop over all arguments
for arg in "$@"; do
    if [ "$arg" == "::" ]; then
        # Mark that we've encountered the separator
        found_separator=true
    elif $found_separator; then
        # Append the argument to group 2 if we've encountered the separator
        executable_args+=("$arg")
    else
        # Otherwise, append the argument to group 1
        dcc_args+=("$arg")
    fi
done

# Remove '-o <arg> from dcc args'
dcc_args=$(echo "$dcc_args" | sed -E 's/-o [^[:space:]]+//g')


# Build and run file using dcc and then delete the executable.
if [ ! -f "$filename" ]; then
  echo "File '$filename' does not exist."
  exit 1
fi

output=$(dcc $filename $dcc_args -fsyntax-only 2>&1)

temp_filename=$(generate_unique_filename)
dcc $filename ${dcc_args[@]} -o "$temp_filename" 2>&1

# Check if output is empty (if dcc returned zero warnings or errors)
if [ -z "$output" ]; then
  echo "::"
  ./"$temp_filename" "${executable_args[@]}"
fi

# Check if temp_filename exists in the current directory
if [ -f "$temp_filename" ]; then
  rm ./"$temp_filename"
fi

exit 0